---
// Adapted from https://github.com/markteekman/accessible-astro-components/tree/main
---

<div class="accordion">
    <ul role="list" class="accordion__wrapper">
        <slot />
    </ul>
</div>

<script type="module">
// variables
const accordionItems = [...document.querySelectorAll('.accordion__item')];

// functions
const getPanelHeight = (accordionItem) => {
    const accordionInner = accordionItem.querySelector('.panel__inner');
    return accordionInner.getBoundingClientRect().height;
};

const openAccordionItem = (accordionItem) => {
    const accordionItemHeader =
        accordionItem.querySelector('.accordion__header');
    const accordionToggleIndicator = accordionItem.querySelector(
        '.header__toggle-indicator'
    );
    const accordionPanel = accordionItem.querySelector('.accordion__panel');

    accordionPanel.style.height = `${getPanelHeight(accordionItem)}px`;
    accordionItem.classList.add('is-active');
    accordionItemHeader.setAttribute('aria-expanded', true);
    accordionToggleIndicator.innerHTML = `<svg class="header__toggle-indicator" aria-hidden="true" data-prefix="fas" data-icon="minus" class="svg-inline--fa fa-minus fa-w-14" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>`;
};

const closeAccordionItem = (accordionItem) => {
    const accordionItemHeader =
        accordionItem.querySelector('.accordion__header');
    const accordionToggleIndicator = accordionItem.querySelector(
        '.header__toggle-indicator'
    );
    const accordionPanel = accordionItem.querySelector('.accordion__panel');

    accordionItem.classList.remove('is-active');
    accordionPanel.style.height = 0;
    accordionItemHeader.focus();
    accordionItemHeader.setAttribute('aria-expanded', false);
    accordionToggleIndicator.innerHTML = `<svg class="header__toggle-indicator" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"> <path fill="currentColor" d="M256 82.7l22.6 22.6 192 192L493.3 320 448 365.3l-22.6-22.6L256 173.3 86.6 342.6 64 365.3 18.7 320l22.6-22.6 192-192L256 82.7z"></path></svg>`;
};

const isAccordionOpen = (accordionItem) => {
    return accordionItem.classList.contains('is-active');
};

function toggleAccordionItem() {
    const accordionItem = event.target.closest('.accordion__item');
    if (!accordionItem || event.target.closest('.accordion__panel')) return;

    isAccordionOpen(accordionItem)
        ? closeAccordionItem(accordionItem)
        : openAccordionItem(accordionItem);
}

function recalculateHeight() {
    const toggledAccordionItems = accordionItems.filter((element) =>
        element.classList.contains('is-active')
    );

    toggledAccordionItems.forEach((toggledAccordionItem) => {
        const accordionPanel =
            toggledAccordionItem.querySelector('.accordion__panel');
        accordionPanel.style.height = `${getPanelHeight(
            toggledAccordionItem
        )}px`;
    });
}

// execution
accordionItems.forEach((item, index) => {
    const accordionItemHeader = item.querySelector('.accordion__header');
    const accordionItemPanel = item.querySelector('.accordion__panel');

    accordionItemHeader.setAttribute('id', `accordion-item${index + 1}`);
    accordionItemPanel.setAttribute('id', `item${index + 1}`);

    accordionItemHeader.setAttribute('aria-controls', `item${index + 1}`);
    accordionItemPanel.setAttribute(
        'aria-labelledby',
        `accordion-item${index + 1}`
    );
});

document.addEventListener('keydown', (event) => {
    const accordionItem = event.target.closest('.accordion__item');

    if (event.key !== 'Escape') return;
    if (!accordionItem) return;

    if (isAccordionOpen(accordionItem)) {
        closeAccordionItem(accordionItem);
    }
});

document.addEventListener('keydown', (event) => {
    if (!event.target.closest('.accordion__header')) return;

    const accordionWrapper = event.target.closest('.accordion__wrapper');
    const accordionItem = event.target.closest('.accordion__item');
    const accordionItems = [
        ...accordionWrapper.querySelectorAll('.accordion__item'),
    ];
    const index = accordionItems.findIndex(
        (element) => element === accordionItem
    );

    const { key } = event;

    let targetItem;

    if (key === 'ArrowDown') {
        targetItem = accordionItems[index + 1];
    }

    if (key === 'ArrowUp') {
        targetItem = accordionItems[index - 1];
    }

    if (targetItem) {
        event.preventDefault();
        targetItem.querySelector('.accordion__header').focus();
    }
});

window.toggleAccordionItem = toggleAccordionItem;
window.onresize = recalculateHeight;
</script>
